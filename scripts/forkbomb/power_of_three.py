# https://20200301.forkbomb.ru/tasks/j0301_powerofthree
import decimal
from Crypto.Util import number

decimal.getcontext().prec = 1000

n = 65270375469842114795537748268612878228249901256457321463604122636330826586224325952495069869558343393435706871615380872594297892549182818059614228969539396343271776215757468039324216187844721445635041241796104577392129113650907154026054244824872463152196788811190350811167613228031457985938408337573577449633
e = 42510000657192594564481070258533657711961010713544673680545945462804937544088012998510116203811536913088342421152386574103225226547822779454073501956953181800867711038247692298590670730131547217725743865598689197297763556710209037390192320583250021018417034157541254989718338401279543686259195965355627638309


def root_3(value):
    return decimal.Decimal(value) ** (decimal.Decimal('1') / 3)


def find_flag():
    # flag ^ 3 = e + i * n
    # flag = root_3(e + i * n), where flag in N
    for i in range(n):
        current = e + i * n
        s = number.long_to_bytes(round(root_3(current)))
        possible_flag = s.decode(errors='ignore')
        if 'spbctf' in possible_flag:
            print(possible_flag)
            break

find_flag()
